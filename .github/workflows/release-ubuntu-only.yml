name: Ubuntu Only Release

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release from the latest tag'
        required: true
        type: boolean
        default: true

permissions:
  contents: write
  actions: write

env:
  RUSTUP_TOOLCHAIN: nightly-2025-04-06

jobs:
  # build-docker:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Log parallel execution start
  #       run: |
  #         echo "üöÄ Starting Docker build at $(date)"
  #         echo "Job: ${{ github.job }}"
  #         echo "Run ID: ${{ github.run_id }}"
          
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: clients/cli
  #         file: clients/cli/Dockerfile
  #         push: true
  #         platforms: linux/amd64,linux/arm64
  #         tags: |
  #           nexusxyz/nexus-cli:latest
  #           nexusxyz/nexus-cli:${{ github.sha }}
  #           nexusxyz/nexus-cli:${{ github.ref_name }}
  build-linux-x86_64:
    name: Build Linux (x86_64)
    runs-on: ubuntu-22.04
    steps:
      - name: Log parallel execution start
        run: |
          echo "üöÄ Starting x86_64 build at $(date)"
          echo "Job: ${{ github.job }}"
          echo "Run ID: ${{ github.run_id }}"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "clients/cli -> target"
          cache-all-crates: "true"
          cache-on-failure: "true"
          key: "linux-x86_64"

      - name: Install & Use `mold`
        uses: rui314/setup-mold@v1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUSTUP_TOOLCHAIN }}
          targets: x86_64-unknown-linux-gnu
          components: rustfmt

      - name: Debug Environment
        run: |
          echo "OS: $(lsb_release -d)"
          echo "Rust version: $(rustc --version --verbose)"
          echo "Cargo version: $(cargo --version)"
          echo "Host target: $(rustc -vV | grep host)"

      - name: Build Linux x86_64 binary
        working-directory: clients/cli
        run: cargo build --release --target x86_64-unknown-linux-gnu
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Rename binary
        working-directory: clients/cli/target/x86_64-unknown-linux-gnu/release/
        run: cp nexus-network nexus-network-linux-x86_64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexus-network-linux-x86_64
          path: clients/cli/target/x86_64-unknown-linux-gnu/release/nexus-network-linux-x86_64

  build-linux-arm64:
    name: Build Linux (ARM64)
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Log parallel execution start
        run: |
          echo "üöÄ Starting ARM64 build at $(date)"
          echo "Job: ${{ github.job }}"
          echo "Run ID: ${{ github.run_id }}"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: "clients/cli -> target"
          cache-all-crates: "true"
          cache-on-failure: "true"
          key: "linux-arm64-native"

      - name: Install & Use `mold`
        uses: rui314/setup-mold@v1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUSTUP_TOOLCHAIN }}
          components: rustfmt

      - name: Debug Environment
        run: |
          echo "OS: $(lsb_release -d)"
          echo "Rust version: $(rustc --version --verbose)"
          echo "Cargo version: $(cargo --version)"
          echo "Host target: $(rustc -vV | grep host)"
          echo "Architecture: $(uname -m)"
          echo "Default target: $(rustc -vV | grep host | cut -d' ' -f2)"

      - name: Clear any cross-compilation settings
        run: |
          # Ensure we're using native compilation
          unset CARGO_BUILD_TARGET
          unset CARGO_TARGET_DIR
          echo "Cleared cross-compilation environment variables"

      - name: Clean potential cross-compilation artifacts
        working-directory: clients/cli
        run: |
          # Clean any existing build artifacts that might be from cross-compilation
          cargo clean
          echo "Cleaned build artifacts"

      - name: Temporarily disable conflicting cargo configs
        working-directory: clients/cli
        run: |
          # Temporarily rename cargo config files that set RISC-V targets
          if [ -f "examples/.cargo/config.toml" ]; then
            echo "Temporarily moving examples/.cargo/config.toml"
            mv examples/.cargo/config.toml examples/.cargo/config.toml.bak
          fi
          if [ -f "programs/fib_input_initial/src/guest/.cargo/config.toml" ]; then
            echo "Temporarily moving guest cargo config"
            mv programs/fib_input_initial/src/guest/.cargo/config.toml programs/fib_input_initial/src/guest/.cargo/config.toml.bak
          fi

      - name: Build Linux ARM64 binary (native)
        working-directory: clients/cli
        run: |
          # Ensure native compilation by clearing any target settings
          unset CARGO_BUILD_TARGET
          unset CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER
          
          # Verify we're building for the native target
          echo "Building for native ARM64 target..."
          echo "Host architecture: $(uname -m)"
          NATIVE_TARGET=$(rustc -vV | grep host | cut -d' ' -f2)
          echo "Rust default target: $NATIVE_TARGET"
          echo "Current working directory: $(pwd)"
          
          # Check for any cargo config that might affect the build
          echo "Checking for .cargo/config.toml files that might affect build:"
          find . -name "config.toml" -path "*/.cargo/*" -exec echo "Found: {}" \; -exec cat {} \;
          
          # Show cargo environment
          echo "Cargo environment:"
          cargo version --verbose
          
          # Build with explicit native target to override any config files
          echo "Starting native ARM64 build with explicit target: $NATIVE_TARGET"
          cargo build --release --target $NATIVE_TARGET --verbose
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Rename binary
        working-directory: clients/cli
        run: |
          NATIVE_TARGET=$(rustc -vV | grep host | cut -d' ' -f2)
          echo "Copying binary from target/$NATIVE_TARGET/release/"
          cp target/$NATIVE_TARGET/release/nexus-network target/$NATIVE_TARGET/release/nexus-network-linux-arm64

      - name: Verify ARM64 binary location
        working-directory: clients/cli
        run: |
          echo "üîç Verifying ARM64 binary location:"
          NATIVE_TARGET=$(rustc -vV | grep host | cut -d' ' -f2)
          echo "Native target: $NATIVE_TARGET"
          echo "Looking for binary at: target/$NATIVE_TARGET/release/nexus-network-linux-arm64"
          
          if [ -f "target/$NATIVE_TARGET/release/nexus-network-linux-arm64" ]; then
            echo "‚úÖ ARM64 binary found!"
            ls -la "target/$NATIVE_TARGET/release/nexus-network-linux-arm64"
          else
            echo "‚ùå ARM64 binary NOT found!"
            echo "Contents of target/$NATIVE_TARGET/release/:"
            ls -la "target/$NATIVE_TARGET/release/" || echo "Directory does not exist"
          fi

      - name: Restore cargo config files
        if: always()
        working-directory: clients/cli
        run: |
          # Restore the temporarily moved cargo config files (always run, even if build fails)
          if [ -f "examples/.cargo/config.toml.bak" ]; then
            echo "Restoring examples/.cargo/config.toml"
            mv examples/.cargo/config.toml.bak examples/.cargo/config.toml
          fi
          if [ -f "programs/fib_input_initial/src/guest/.cargo/config.toml.bak" ]; then
            echo "Restoring guest cargo config"
            mv programs/fib_input_initial/src/guest/.cargo/config.toml.bak programs/fib_input_initial/src/guest/.cargo/config.toml
          fi

      - name: Prepare ARM64 artifact for upload
        working-directory: clients/cli
        run: |
          NATIVE_TARGET=$(rustc -vV | grep host | cut -d' ' -f2)
          echo "Preparing ARM64 artifact with target: $NATIVE_TARGET"
          
          # Create a staging directory for the artifact
          mkdir -p upload-staging
          
          # Copy the binary to the staging directory
          if [ -f "target/$NATIVE_TARGET/release/nexus-network-linux-arm64" ]; then
            cp "target/$NATIVE_TARGET/release/nexus-network-linux-arm64" upload-staging/
            echo "‚úÖ ARM64 binary copied to staging directory"
            ls -la upload-staging/
          else
            echo "‚ùå ARM64 binary not found at expected location"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexus-network-linux-arm64
          path: clients/cli/upload-staging/nexus-network-linux-arm64

  release:
    name: Create Release
    needs: [build-linux-x86_64, build-linux-arm64]
    if: github.event.inputs.create_release == 'true' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    steps:
      - name: Debug release conditions
        run: |
          echo "üîç Debug release conditions:"
          echo "Event name: ${{ github.event_name }}"
          echo "Event ref: ${{ github.ref }}"
          echo "Event inputs: ${{ toJSON(github.event.inputs) }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "Manual create_release: ${{ github.event.inputs.create_release }}"
          echo "Is workflow_dispatch: ${{ github.event_name == 'workflow_dispatch' }}"
          echo "Should create release: ${{ github.event.inputs.create_release == 'true' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch' }}"

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List downloaded artifacts
        run: ls -lh artifacts/

      - name: Debug downloaded artifacts
        run: |
          echo "üîç Detailed artifact analysis:"
          echo "Artifacts directory contents:"
          find artifacts -type f -exec ls -la {} \;
          echo ""
          echo "Expected files:"
          echo "- nexus-network-linux-x86_64"
          echo "- nexus-network-linux-arm64"
          echo ""
          echo "File verification:"
          for file in "nexus-network-linux-x86_64" "nexus-network-linux-arm64"; do
            if [ -f "artifacts/$file" ]; then
              echo "‚úÖ $file found ($(stat -c%s artifacts/$file) bytes)"
            else
              echo "‚ùå $file missing"
            fi
          done

      - name: Generate SHA256 checksums
        run: |
          cd artifacts
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" | awk '{print $1}' > "$file.sha256"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/nexus-network-linux-x86_64
            artifacts/nexus-network-linux-x86_64.sha256
            artifacts/nexus-network-linux-arm64
            artifacts/nexus-network-linux-arm64.sha256
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 